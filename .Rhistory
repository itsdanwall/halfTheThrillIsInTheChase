jpi_tbl1_reps_sum
jpi_tbl1
jpi_tbl1_reps_sum
source('~/.active-rstudio-document', echo=TRUE)
jpi_tbl1_reps_sum
jpi_tbl1_reps_sum$studysd_gt_simsd %>% summary
132/10000
source('~/.active-rstudio-document', echo=TRUE)
jpi_tbl1_reps_sum$studysd_gt_simsd %>% summary
jpi_tbl1
# redo of Simonsohn
library(dplyr)
library(truncnorm)
# function to calculate sd of sample
sd_samp <- function(df, reps) {
nper <- as.numeric(df[1, "n_per"])
minscore <- as.numeric(df[1, "min_score"])
maxscore <- as.numeric(df[1, "max_score"])
mean <- as.numeric(df[1, "mean"])
pooledsd <- as.numeric(df[1, "pooled_sd"])
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "rep_sd"
reps
}
jpi_tbl1 <- data.frame(cond = c("high", "low", "ctrl"),
mean = c(39.74, 85.74, 65.73),
sd = c(25.09, 24.58, 25.65),
n_per = c(15, 15, 15),
min_score = c(0, 0, 0),
max_score = c(100, 100, 100)) %>%
mutate(pooled_sd = mean(sd),
sd_sds = sd(sd),
mean_n = mean(n_per),
se_sds = pooled_sd/(sqrt(mean_n)))
jpi_tbl1
# redo of Simonsohn
library(dplyr)
library(truncnorm)
# function to calculate sd of sample
sd_samp <- function(df, reps) {
nper <- as.numeric(df[1, "n_per"])
minscore <- as.numeric(df[1, "min_score"])
maxscore <- as.numeric(df[1, "max_score"])
mean <- as.numeric(df[1, "mean"])
pooledsd <- as.numeric(df[1, "pooled_sd"])
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "rep_sd"
reps
}
jpi_tbl1 <- data.frame(cond = c("high", "low", "ctrl"),
mean = c(39.74, 85.74, 65.73),
sd = c(25.09, 24.58, 25.65),
n_per = c(15, 15, 15),
min_score = c(0, 0, 0),
max_score = c(100, 100, 100)) %>%
mutate(pooled_sd = mean(sd),
sd_sds = sd(sd),
mean_n = mean(n_per),
se_sds = pooled_sd/(sqrt(2*mean_n)))
jpi_tbl1
# redo of Simonsohn
library(dplyr)
library(truncnorm)
# function to calculate sd of sample
sd_samp <- function(df, reps) {
nper <- as.numeric(df[1, "n_per"])
minscore <- as.numeric(df[1, "min_score"])
maxscore <- as.numeric(df[1, "max_score"])
mean <- as.numeric(df[1, "mean"])
pooledsd <- as.numeric(df[1, "pooled_sd"])
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "rep_sd"
reps
}
jpi_tbl1 <- data.frame(cond = c("high", "low", "ctrl"),
mean = c(39.74, 85.74, 65.73),
sd = c(25.09, 24.58, 25.65),
n_per = c(15, 15, 15),
min_score = c(0, 0, 0),
max_score = c(100, 100, 100)) %>%
mutate(pooled_sd = mean(sd),
sd_sds = sd(sd),
mean_n = mean(n_per),
se_sds = pooled_sd/(sqrt(2*mean_n)),
psi = sd_sds / se_sds)
jpi_tbl1
source('C:/git_repositories/halfTheThrillIsInTheChase/jpi_redo.R', echo=TRUE)
jpi_tbl1_reps_sum
jpi_tbl1
jpi_tbl1_reps_sum <- jpi_tbl1_reps %>%
ungroup() %>%
group_by(n_rep) %>%
summarise(sim_sd_sds = sd(rep_sd),
pooled_sd = mean(rep_sd),
se_sds = pooled_sd/(sqrt(2*15)),
psi = sim_sd_sds / se_sds) %>%
mutate(study_sd_sds = 0.5351947,
study_psi = 0.1167571,
studysd_gt_simsd = ifelse(study_sd_sds > sim_sd_sds, TRUE, FALSE))
jpi_tbl1_reps_sum
source('C:/git_repositories/halfTheThrillIsInTheChase/jpi_redo.R', echo=TRUE)
jpi_tbl1_reps_sum
jpi_tbl1_reps_sum$studypsi_gt_simpsi %>% summary
jpi_tbl1_reps_sum$studysd_gt_simsd %>% summary
library(dplyr)
library(truncnorm)
library(ggplot2)
library(plotrix)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable
tbl1sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd = mean(sd),
mean_n = mean(n_per),
se_sds = pooled_sd/(sqrt(2*mean_n)),
psi = sd_sd_obs / se_sds)
tbl1 <- left_join(tbl1, tbl1sum)
View(tbl1)
View(tbl1)
library(dplyr)
library(truncnorm)
library(ggplot2)
library(plotrix)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
nper <- as.numeric(df[1, "n_per"])
minscore <- as.numeric(df[1, "min_score"])
maxscore <- as.numeric(df[1, "max_score"])
mean <- as.numeric(df[1, "mean"])
pooledsd <- as.numeric(df[1, "pooled_sd"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "rep_sd"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd = mean(sd),
mean_n = mean(n_per),
se_sds = pooled_sd/(sqrt(2*mean_n)),
psi = sd_sd_obs / se_sds)
# merge summarized data with table 1 data
tbl1 <- left_join(tbl1, tbl1sum)
reps <- 100000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# get the number of
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
tbl1_reps <- left_join(tbl1_reps, tbl1sum)
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps) %>%
left_join(tbl1_reps, tbl1sum)
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps) %>%
left_join(tbl1sum)
View(tbl1_reps)
# merge with summary data
tbl1_reps_sum <- left_join(tbl1_reps, tbl1sum) %>%
group_by(variable, n_rep) %>%
summarise(sim_sd_sds = sd(rep_sd),
sim_pooled_sd = mean(rep_sd)) %>%
# get the simulated standard deviations and psi's
mutate(sim_se_sds = sim_pooled_sd/(sqrt(2 * 11)),
sim_psi = sim_sd_sds/sim_se_sds)
View(tbl1_reps_sum)
reps <- 100000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sim_sd_sds = sd(rep_sd),
sim_pooled_sd = mean(rep_sd)) %>%
# get the simulated standard deviations and psi's
mutate(sim_se_sds = sim_pooled_sd/(sqrt(2 * 11)),
sim_psi = sim_sd_sds/sim_se_sds)
# merge simulated data with empirical data
tbl1_reps_sum <- tbl1_reps_sum %>%
left_join(tbl1sum)
View(tbl1_reps_sum)
tbl1_sum
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
View(tbl1_sum)
View(tbl1)
45*reps
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "sd_rep"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
reps <- 100000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "sd_rep"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1sum)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
reps <- 100000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "sd_rep"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
reps <- 100000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_rep = pooled_sd_sim/(sqrt(2 * 11)),
sim_psi = sd_sd_sim/se_sd_sim)
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
sim_psi = sd_sd_sim/se_sd_sim)
tbl1_reps_sum <- tbl1_reps_sum %>%
left_join(tbl1_sum)
View(tbl1_reps_sum)
tbl1_reps_sum <- tbl1_reps_sum %>%
mutate(sd_sd_obs_gt_sd_sd_sim = ifelse(sd_sd_obs >= sim_sd_sds, TRUE, FALSE))
tbl1_reps_sum <- tbl1_reps_sum %>%
mutate(obs_gt_sim = ifelse(sd_sd_obs >= sd_sd_sim, TRUE, FALSE))
ggplot(tbl1_reps1, aes(x = sim_sd_sds)) +
geom_histogram() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .)
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_histogram() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .)
View(tbl1_reps_sum)
View(tbl1_reps_sum)
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "sd_rep"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
reps <- 100000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim)
# merge simulated data with empirical data
tbl1_reps_sum <- tbl1_reps_sum %>%
left_join(tbl1_sum)
# compare the number of observed sds that are larger than the simulated sds
tbl1_reps_sum <- tbl1_reps_sum %>%
mutate(obs_gt_sim = ifelse(sd_sd_obs >= sd_sd_sim, TRUE, FALSE))
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_histogram() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .)
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = psi_obs[1]) %>%
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(xintercept = psi_obs)
View(sim_meanpsi)
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs))
sim_meanpsi$simpsi_gt_stupsi %>% sum
reps
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .) +
theme_classic()
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .) +
theme_classic()
