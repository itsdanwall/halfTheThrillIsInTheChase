sds
}
# subset dataframe with only three DVs
tbl1_dvs <- tbl1 %>%
filter(variable %in% c("app_sen_ind", "prod_eval", "wtp")) %>%
# arrange so consistent with function
arrange(variable)
# run multiple times
replicates <- tbl1_dvs %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify(~ replicate(
reps,
(sd_cor_fn(
means = .x %>% pull(mean),
sigma)
)
)%>%
t() %>%
as_tibble()
)
# clean up dataframe
replicates <- replicates %>%
group_by(manip) %>%
mutate(reps = 1:n())
# create long version of dataframe
replicates_longer <- replicates %>%
pivot_longer(cols = c(app_sen_ind, prod_eval, wtp))
9994/10000
6/10000
library(truncnorm)
# load packages
library(mvtnorm)
library(tmvtnorm)
library(matrixcalc)
library(corpcor)
library(tidyverse)
library(MBESS)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
rep_d <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps_df <- as.data.frame(rep_d)
names(reps_df) <- "sd_rep"
reps_df
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
# Uri calculates pooled sd as
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
# standard error of the pooled standard devaition
# divide pooled standard deviation by the square root of 2 * n per condition (Is this the same for all implementations?)
# http://urisohn.com/sohn_files/data/JustPostIt/SAS%20Code/(2)%20SAS%20-%20Sanna%20JESP%202011%20-%20bootstrapping.sas
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
reps <- 10000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim)
# merge simulated data with empirical data
tbl1_reps_sum <- tbl1_reps_sum %>%
left_join(tbl1_sum)
# compare the number of observed sds that are larger than the simulated sds
tbl1_reps_sum <- tbl1_reps_sum %>%
mutate(obs_gt_sim = ifelse(sd_sd_obs >= sd_sd_sim, TRUE, FALSE))
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
# changed this
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
# subset dataframe with only three DVs
tbl1_dvs <- tbl1 %>%
filter(variable %in% c("app_sen_ind", "prod_eval", "wtp")) %>%
# arrange so consistent with function
arrange(variable)
# set up correlation matrix
correlation <- .9
cor_mat <- diag(1, 3, 3)
cor_mat[cor_mat == 0] <- correlation
# turn into a covariance matrix
sigma <- cor2cov(cor_mat, c(1.71, 0.8026, 1.061))
# check that the determinate isn't 0
det(sigma)
# Function which calculates SDs of DVs for correlated variables
# INPUT:
## means: observed means (need to be in the following order: app_sen_ind, prod_eval, wtp)
## sigma: covariance matrix (same for every condition based on pooled sd's and equivalent correlations across conditions)
## lower: lower bound of variable
## upper: upper bound of varialbe
## names: names of the variables
## n: number of participants in that cell
# OUTPUT:
## standard deviations of the three DVs from a sample from a multivariate normal distribution
sd_cor_fn <- function(means, sigma, lower, upper, names, n) {
# Pull from a truncated multivariate normal distribution
measures <- rtmvnorm(
n = n,
mean = means,
sigma = sigma,
lower = lower,
upper = upper
)
# Calc SDs and make pretty
sds <- apply(measures, 2, sd)
names(sds) <- names
sds
}
reps <-  1e4
# run multiple times
dvs_sds <- tbl1_dvs %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify(~ replicate(reps,
(
sd_cor_fn(
means = .x %>% pull(mean),
sigma,
lower = .x %>%  pull(min_score),
upper = .x %>%   pull(max_score),
names = .x %>%  pull(variable),
n = .x %>%  pull(n_per) %>% `[`(1)
)
)) %>%
t() %>%
as_tibble()
)
# clean up dataframe
dvs_sds <- dvs_sds %>%
group_by(manip) %>%
mutate(reps = 1:n())
# create long version of dataframe
dvs_sds_longer <- dvs_sds %>%
pivot_longer(cols = c(app_sen_ind, prod_eval, wtp))
# subset dataframe with only three DVs
tbl1_dvs <- tbl1 %>%
filter(variable %in% c("app_sen_ind", "prod_eval", "wtp")) %>%
# arrange so consistent with function
arrange(variable)
# set up correlation matrix
correlation <- .9
cor_mat <- diag(1, 3, 3)
cor_mat[cor_mat == 0] <- correlation
# turn into a covariance matrix
sigma <- cor2cov(cor_mat, c(1.71, 0.8026, 1.061))
# check that the determinate isn't 0
# det(sigma)
# Function which calculates SDs of DVs for correlated variables
# INPUT:
## means: observed means (need to be in the following order: app_sen_ind, prod_eval, wtp)
## sigma: covariance matrix (same for every condition based on pooled sd's and equivalent correlations across conditions)
## lower: lower bound of variable
## upper: upper bound of varialbe
## names: names of the variables
## n: number of participants in that cell
# OUTPUT:
## standard deviations of the three DVs from a sample from a multivariate normal distribution
sd_cor_fn <- function(means, sigma, lower, upper, names, n) {
# Pull from a truncated multivariate normal distribution
measures <- rtmvnorm(
n = n,
mean = means,
sigma = sigma,
lower = lower,
upper = upper
)
# Calc SDs and make pretty
sds <- apply(measures, 2, sd)
names(sds) <- names
sds
}
reps <-  1e4
# run multiple times
dvs_sds <- tbl1_dvs %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify(~ replicate(reps,
(
sd_cor_fn(
means = .x %>% pull(mean),
sigma,
lower = .x %>%  pull(min_score),
upper = .x %>%   pull(max_score),
names = .x %>%  pull(variable),
n = .x %>%  pull(n_per) %>% `[`(1)
)
)) %>%
t() %>%
as_tibble()
)
# clean up dataframe
dvs_sds <- dvs_sds %>%
group_by(manip) %>%
mutate(reps = 1:n())
# create long version of dataframe
dvs_sds_longer <- dvs_sds %>%
pivot_longer(cols = c(app_sen_ind, prod_eval, wtp))
![Table 1](easier-better-table1.PNG)
nlsn_escls_shpro_tbl3 <- read_csv("nielsen-escalas-2010-tbl3.csv")
nlsn_escls_shpro_tbl3 <- nlsn_escls_shpro_tbl3 %>%
mutate(sd = se * sqrt(n_per))
nlsn_escls_shpro_tbl3_sum <- nlsn_escls_shpro_tbl3 %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
nlsn_escls_shpro_tbl3 <- nlsn_escls_shpro_tbl3 %>%
bind_cols(nlsn_escls_shpro_tbl3_sum %>%
slice(rep(1:n(), each=5)))
nlsn_escls_shpro_tbl3_reps <- nlsn_escls_shpro_tbl3 %>%
group_by(image, font) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
nlsn_escls_shpro_tbl3_reps <- nlsn_escls_shpro_tbl3_reps %>%
group_by(image, font) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
nlsn_escls_shpro_tbl3_reps_sum <- nlsn_escls_shpro_tbl3_reps %>%
group_by(n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * nlsn_escls_shpro_tbl3$mean_n_obs[1])),
psi_sim = sd_sd_sim/se_sd_sim)
(nlsn_escls_shpro_tbl3_reps_sum$psi_sim > nlsn_escls_shpro_tbl3_sum$psi_obs) %>% sum
nlsn_escls_tbl2 <- read_csv("nielsen-escalas-2010-tbl2.csv")
nlsn_escls_tbl2 <- nlsn_escls_tbl2 %>%
mutate(sd = se * sqrt(n_per))
nlsn_escls_tbl2_sum <- nlsn_escls_tbl2 %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
nlsn_escls_tbl2 <- nlsn_escls_tbl2 %>%
bind_cols(nlsn_escls_tbl2_sum %>%
slice(rep(1:n(), each=8)))
nlsn_escls_tbl2_reps <- nlsn_escls_tbl2 %>%
group_by(processing_inst, font, ad_type) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
nlsn_escls_tbl2_reps <- nlsn_escls_tbl2_reps %>%
group_by(processing_inst, font, ad_type) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
nlsn_escls_tbl2_reps_sum <- nlsn_escls_tbl2_reps %>%
group_by(n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * nlsn_escls_tbl2$mean_n_obs[1])),
psi_sim = sd_sd_sim/se_sd_sim)
(nlsn_escls_tbl2_reps_sum$psi_sim > nlsn_escls_tbl2_sum$psi_obs) %>% sum
sim_meanpsi <- sd_sd_sim %>%
group_by(reps) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
nlsn_escls_tbl1 <- read_csv("nielsen-escalas-2010-tbl1.csv")
nlsn_escls_tbl1 <- nlsn_escls_tbl1 %>%
mutate(sd = se * sqrt(n_per))
nlsn_escls_tbl1_sum <- nlsn_escls_tbl1 %>%
group_by(dv) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
nlsn_escls_tbl1 <- merge(nlsn_escls_tbl1, nlsn_escls_tbl1_sum)
# set up correlation and covariance matrix
correlation <- .9
cor_mat <- diag(1, 4, 4)
cor_mat[cor_mat == 0] <- correlation
# turn into a covariance matrix
sigma <- cor2cov(cor_mat, nlsn_escls_tbl1 %>% group_by(dv) %>% summarise(std_dev = pooled_sd_obs[1]) %>% pull(std_dev))
# check that the determinate isn't 0
det(sigma)
# run multiple times
nlsn_escls_tbl1_sds <- nlsn_escls_tbl1 %>%
group_by(cond) %>%
arrange(dv) %>%
#
group_modify(~ replicate(reps,
(
sd_cor_fn(
means = .x %>% pull(mean),
sigma,
lower = .x %>%  pull(min_score),
upper = .x %>%   pull(max_score),
names = .x %>%  pull(dv),
n = .x %>%  pull(n_per) %>% `[`(1)
)
)) %>%
t() %>%
as_tibble()
)
# clean up dataframe
nlsn_escls_tbl1_sds <- nlsn_escls_tbl1_sds %>%
group_by(cond) %>%
mutate(reps = 1:n())
# create long version of dataframe
nlsn_escls_tbl1_sds_lng <- nlsn_escls_tbl1_sds %>%
pivot_longer(cols = -c(cond, reps))
nlsn_escls_tbl1_cors <- nlsn_escls_tbl1_sds_lng %>%
group_by(reps, name) %>%
summarise(sd_sd_val = sd(value)) %>%
pivot_wider(names_from= name, values_from = sd_sd_val)
cor(nlsn_escls_tbl1_cors[, -1])
# create dataframe which looks at each DV
sd_sd_sim <- nlsn_escls_tbl1_sds_lng %>%
group_by(name, reps) %>%
summarise(sd_sd_sim = sd(value),
pooled_sd_sim = mean(value)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * nlsn_escls_tbl1$mean_n_obs[1])),
psi_sim = sd_sd_sim/se_sd_sim) %>%
rename(dv = name)
# join with observed sd of sds
sd_sd_sim <- sd_sd_sim %>%
left_join(nlsn_escls_tbl1_sum)
sd_sd_sim_wide <- sd_sd_sim %>%
dplyr::select(reps, dv, sd_sd_sim) %>%
pivot_wider(id_cols = reps,
values_from = sd_sd_sim,
names_from = dv)
# density plot
sd_sd_sim %>%
ggplot(aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(dv~.) +
theme_classic()
sim_meanpsi <- sd_sd_sim %>%
group_by(reps) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
nlsn_escls_tbl2 <- read_csv("nielsen-escalas-2010-tbl2.csv")
nlsn_escls_tbl2 <- nlsn_escls_tbl2 %>%
mutate(sd = se * sqrt(n_per))
nlsn_escls_tbl2_sum <- nlsn_escls_tbl2 %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
nlsn_escls_tbl2 <- nlsn_escls_tbl2 %>%
bind_cols(nlsn_escls_tbl2_sum %>%
slice(rep(1:n(), each=8)))
nlsn_escls_tbl2_reps <- nlsn_escls_tbl2 %>%
group_by(processing_inst, font, ad_type) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
nlsn_escls_tbl2_reps <- nlsn_escls_tbl2_reps %>%
group_by(processing_inst, font, ad_type) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
nlsn_escls_tbl2_reps_sum <- nlsn_escls_tbl2_reps %>%
group_by(n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * nlsn_escls_tbl2$mean_n_obs[1])),
psi_sim = sd_sd_sim/se_sd_sim)
(nlsn_escls_tbl2_reps_sum$psi_sim > nlsn_escls_tbl2_sum$psi_obs) %>% sum
nlsn_escls_tbl2_reps_sum %>%
ggplot(aes(x = psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
nlsn_escls_tbl2_reps_sum
nlsn_escls_tbl2_reps_sum %>%
ggplot(aes(x = psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = nlsn_escls_tbl2_sum$psi_obs)) +
theme_classic()
nlsn_escls_shpro_tbl3_reps_sum %>%
ggplot(aes(x = psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = nlsn_escls_shpro_tbl3_sum$psi_obs)) +
theme_classic()
nlsn_shpro_tbl1 <- read_csv("nielsen-shapiro-2009-tbl1-totals.csv")
nlsn_shpro_tbl1 <- nlsn_shpro_tbl1 %>%
mutate(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
nlsn_shpro_tbl1_reps <- nlsn_shpro_tbl1 %>%
group_by(fear_lvl, threat_rel) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
nlsn_shpro_tbl1_reps <- nlsn_shpro_tbl1_reps %>%
group_by(fear_lvl, threat_rel) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
nlsn_shpro_tbl1_reps_sum <- nlsn_shpro_tbl1_reps %>%
group_by(fear_lvl, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * nlsn_shpro_tbl1$mean_n_obs[1])),
psi_sim = sd_sd_sim/se_sd_sim)
nlsn_shpro_tbl1_reps_sum %>%
left_join(nlsn_shpro_tbl1_sum)
nlsn_shpro_tbl1_reps_sum
nlsn_shpro_tbl1_reps_sum %>%
left_join(nlsn_shpro_tbl1_sum)
# nlsn_shpro_tbl1_reps_sum %>%
#   left_join(nlsn_shpro_tbl1_sum)
(nlsn_shpro_tbl1_reps_sum$psi_sim > nlsn_shpro_tbl1_sum$psi_obs[1]) %>% sum
nlsn_shpro_tbl1_sum <- nlsn_shpro_tbl1 %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
nlsn_shpro_tbl1_reps <- nlsn_shpro_tbl1 %>%
group_by(fear_lvl, threat_rel) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
nlsn_shpro_tbl1_reps <- nlsn_shpro_tbl1_reps %>%
group_by(fear_lvl, threat_rel) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
nlsn_shpro_tbl1_reps_sum <- nlsn_shpro_tbl1_reps %>%
group_by(fear_lvl, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * nlsn_shpro_tbl1$mean_n_obs[1])),
psi_sim = sd_sd_sim/se_sd_sim)
# nlsn_shpro_tbl1_reps_sum %>%
#   left_join(nlsn_shpro_tbl1_sum)
(nlsn_shpro_tbl1_reps_sum$psi_sim > nlsn_shpro_tbl1_sum$psi_obs[1]) %>% sum
nlsn_shpro_tbl1_reps_sum %>%
ggplot(aes(x = psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = nlsn_shpro_tbl1_sum$psi_obs)) +
theme_classic()
View(nlsn_shpro_tbl1_reps_sum)
nlsn_shpro_tbl1_sum$psi_obs
nlsn_escls_shpro_tbl3
nlsn_shpro_tbl1_reps_sum$psi_sim
(nlsn_shpro_tbl1_reps_sum$psi_sim > nlsn_shpro_tbl1_sum$psi_obs) %>% sum
reps
10000 - 9894
106/10000
nlsn_shpro_tbl1_reps_sum %>%
ggplot(aes(x = psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = nlsn_shpro_tbl1_sum$psi_obs)) +
theme_classic()
