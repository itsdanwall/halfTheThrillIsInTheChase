# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "sd_rep"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
reps <- 100000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim)
# merge simulated data with empirical data
tbl1_reps_sum <- tbl1_reps_sum %>%
left_join(tbl1_sum)
# compare the number of observed sds that are larger than the simulated sds
tbl1_reps_sum <- tbl1_reps_sum %>%
mutate(obs_gt_sim = ifelse(sd_sd_obs >= sd_sd_sim, TRUE, FALSE))
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_histogram() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .)
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = psi_obs[1]) %>%
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(xintercept = psi_obs)
View(sim_meanpsi)
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs))
sim_meanpsi$simpsi_gt_stupsi %>% sum
reps
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .) +
theme_classic()
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .) +
theme_classic()
install.packages("tmvtnorm")
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
tb1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind")))
View(tb1_ctrls)
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
rep_d <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps_df <- as.data.frame(rep_d)
names(reps_df) <- "sd_rep"
reps_df
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
# load packages
library(mvtnorm)
library(tmvtnorm)
library(matrixcalc)
library(corpcor)
library(tidyverse)
tb1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind")))
View(tb1_ctrls)
tb1_dvs <- tbl1 %>%
filter(variable %in% c("prod_eval", "wtp","app_sen_ind"))
View(tb1_dvs)
tb1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(label = factor(label,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"out_ctrl",
"task_invol",
"mood")))
tb1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"out_ctrl",
"task_invol",
"mood")))
sigma <- matrix(rep(NA, 36), nrow = 6, ncol = 6)
sigma
!diag(sigma)
tbl1_ctrls %>% group_by(variable) %>% summarise(sd = pooled_sd_obs)
tb1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"out_ctrl",
"task_invol",
"mood")))
tbl1_ctrls %>% group_by(variable) %>% summarise(sd = pooled_sd_obs)
tb1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"out_ctrl",
"task_invol",
"mood")))
tbl1_ctrls %>% group_by(variable) %>% summarise(sd = pooled_sd_obs)
tb1_ctrls %>% group_by(variable) %>% summarise(sd = pooled_sd_obs)
tb1_ctrls %>% group_by(variable) %>% summarise(sd = pooled_sd_obs[1])
tb1_ctrls
tbl1_sum_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"out_ctrl",
"task_invol",
"mood")))
View(tbl1_sum_ctrls)
tb1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1])
tb1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1]) %>% pull(std_dev)
# put variances on diagonal
diag(sigma) <- tb1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1]) %>% pull(std_dev) %>% `^`(2)
sigma
sigma[is.na(sigma)] <- correlation
# set up correlation and covariance matrix
correlation <- .9
sigma[is.na(sigma)] <- correlation
sigma
# check that the determinate isn't 0
det(sigma)
# make sigma positive definite
# have to add tolerace
# from: https://stackoverflow.com/questions/27176595/error-sigma-must-be-positive-definite
sigma <- make.positive.definite(sigma, tol = 1e-3)
sigma
View(tb1_ctrls)
# OUTPUT:
## standard deviations of the three DVs from a sample from a multivariate normal distribution
sd_cor_fn2 <- function(means, sigma, lower, upper, names, n = n) {
# Pull from a truncated multivariate normal distribution
measures <- rtmvnorm(
n = n,
mean = means,
sigma = sigma,
lower = lower,
upper = upper
)
# Calc SDs and make pretty
sds <- apply(measures, 2, sd)
names(sds) <- names
sds
}
tb1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"out_ctrl",
"task_invol",
"mood")))
tbl1_ctrls %>% filter(manip == "approach")
sd_cor_fn(
means = tb1_ctrls %>% filter(manip == "approach"),
sigma)
tb1_ctrls %>% filter(manip == "approach")
# make sigma positive definite
# have to add tolerace
# from: https://stackoverflow.com/questions/27176595/error-sigma-must-be-positive-definite
sigma <- make.positive.definite(sigma, tol = 1e-3)
tb1_ctrls %>% filter(manip == "approach")
tb1_ctrls %>% filter(manip == "approach") %>%
sd_cor_fn2(
means =  . %>% pull(mean),
sigma = sigma,
lower = . %>% pull(lower),
upper = . %>%  pull(upper),
names = . %>% pull(variable),
n_per = . %>% pull(n_per) %>% `[`(1)
)
tb1_ctrls %>% filter(manip == "approach") %>%
sd_cor_fn2(
means =  . %>% pull(mean),
sigma = sigma,
lower = . %>% pull(lower),
upper = . %>%  pull(upper),
names = . %>% pull(variable),
n = . %>% pull(n_per) %>% `[`(1)
)
tb1_ctrls %>% filter(manip == "approach") %>%
sd_cor_fn2(
means =  .x %>% pull(mean),
sigma = sigma,
lower = .x %>% pull(lower),
upper = .x %>%  pull(upper),
names = .x %>% pull(variable),
n = .x %>% pull(n_per) %>% `[`(1)
)
tb1_ctrls %>% filter(manip == "approach") %>% pull(.$mean)
sd_cor_fn2(
means =  tb1_ctrls %>% filter(manip == "approach") %>%  %>% pull(mean),
sd_cor_fn2(
means =  tb1_ctrls %>% filter(manip == "approach") %>%  pull(mean),
sigma = sigma,
lower = tb1_ctrls %>% filter(manip == "approach") %>%  pull(lower),
upper = tb1_ctrls %>% filter(manip == "approach") %>%   pull(upper),
names = tb1_ctrls %>% filter(manip == "approach") %>%  pull(variable),
n = tb1_ctrls %>% filter(manip == "approach") %>%  pull(n_per) %>% `[`(1)
)
tb1_ctrls %>% filter(manip == "approach")
sd_cor_fn2(
means =  tb1_ctrls %>% filter(manip == "approach") %>%  pull(mean),
sigma = sigma,
lower = tb1_ctrls %>% filter(manip == "approach") %>%  pull(min_score),
upper = tb1_ctrls %>% filter(manip == "approach") %>%   pull(max_score),
names = tb1_ctrls %>% filter(manip == "approach") %>%  pull(variable),
n = tb1_ctrls %>% filter(manip == "approach") %>%  pull(n_per) %>% `[`(1)
)
tb1_ctrls %>% filter(manip == "approach")
tbl1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"out_ctrl",
"task_invol",
"mood")))
tbl1_ctrls %>% filter(manip == "approach") %>%  pull(variable)
tbl1_ctrls %>% filter(manip == "approach") %>%  pull(mean)
tb1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1])
tbl1_ctrls
View(tbl1_ctrls)
tb1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1])
tbl1_ctrls
tb1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1]) %>% pull(std_dev)
tbl1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"mood",
"out_ctrl",
"task_invol")))
tbl1_ctrls
View(tbl1_ctrls)
tbl1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"mood",
"out_ctrl",
"task_invol")))
tbl1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1]) %>% pull(std_dev) %>% `^`(2)
tbl1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1]) %>% pull(std_dev)
tbl1_ctrls <- tbl1 %>%
filter(!(variable %in% c("prod_eval", "wtp","app_sen_ind"))) %>%
mutate(variable = factor(variable,
levels = c("att_asn",
"att_unus",
"gen_app_avo",
"mood",
"out_ctrl",
"task_invol")))
# set up correlation and covariance matrix
correlation <- .9
sigma <- matrix(rep(NA, 36), nrow = 6, ncol = 6)
# put variances on diagonal
diag(sigma) <- tbl1_ctrls %>% group_by(variable) %>% summarise(std_dev = pooled_sd_obs[1]) %>% pull(std_dev) %>% `^`(2)
sigma[is.na(sigma)] <- correlation
# make sigma positive definite
# have to add tolerace
# from: https://stackoverflow.com/questions/27176595/error-sigma-must-be-positive-definite
sigma <- make.positive.definite(sigma, tol = 1e-3)
# check that the determinate isn't 0
det(sigma)
sd_cor_fn2 <- function(means, sigma, lower, upper, names, n) {
# Pull from a truncated multivariate normal distribution
measures <- rtmvnorm(
n = n,
mean = means,
sigma = sigma,
lower = lower,
upper = upper
)
# Calc SDs and make pretty
sds <- apply(measures, 2, sd)
names(sds) <- names
sds
}
sd_cor_fn2(
means =  tbl1_ctrls %>% filter(manip == "approach") %>%  pull(mean),
sigma = sigma,
lower = tbl1_ctrls %>% filter(manip == "approach") %>%  pull(min_score),
upper = tbl1_ctrls %>% filter(manip == "approach") %>%   pull(max_score),
names = tbl1_ctrls %>% filter(manip == "approach") %>%  pull(variable),
n = tbl1_ctrls %>% filter(manip == "approach") %>%  pull(n_per) %>% `[`(1)
)
# run multiple times
replicates <- tbl1_ctrls %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify( ~ replicate(reps,
(
sd_cor_fn(
means = .x %>% pull(mean),
sigma,
lower = .x %>%  pull(min_score),
upper = .x %>%   pull(max_score),
names = .x %>%  pull(variable),
n = .x %>%  pull(n_per) %>% `[`(1)
)
)) %>%
t() %>%
as_tibble())
reps <- 10000
# run multiple times
replicates <- tbl1_ctrls %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify(~ replicate(reps,
(
sd_cor_fn(
means = .x %>% pull(mean),
sigma,
lower = .x %>%  pull(min_score),
upper = .x %>%   pull(max_score),
names = .x %>%  pull(variable),
n = .x %>%  pull(n_per) %>% `[`(1)
)
)) %>%
t() %>%
as_tibble())
# run multiple times
replicates <- tbl1_ctrls %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify(~ replicate(reps,
(
sd_cor_fn2(
means = .x %>% pull(mean),
sigma,
lower = .x %>%  pull(min_score),
upper = .x %>%   pull(max_score),
names = .x %>%  pull(variable),
n = .x %>%  pull(n_per) %>% `[`(1)
)
)) %>%
t() %>%
as_tibble())
# clean up dataframe
replicates <- replicates %>%
group_by(manip) %>%
mutate(reps = 1:n())
replicates
# run multiple times
replicates <- tbl1_ctrls %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify(~ replicate(reps,
(
sd_cor_fn2(
means = .x %>% pull(mean),
sigma,
lower = .x %>%  pull(min_score),
upper = .x %>%   pull(max_score),
names = .x %>%  pull(variable),
n = .x %>%  pull(n_per) %>% `[`(1)
)
)) %>%
t() %>%
as_tibble()
)
# run multiple times
replicates <- tbl1_ctrls %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify(~ replicate(1000,
(
sd_cor_fn2(
means = .x %>% pull(mean),
sigma,
lower = .x %>%  pull(min_score),
upper = .x %>%   pull(max_score),
names = .x %>%  pull(variable),
n = .x %>%  pull(n_per) %>% `[`(1)
)
)) %>%
t() %>%
as_tibble()
)
# clean up dataframe
replicates <- replicates %>%
group_by(manip) %>%
mutate(reps = 1:n())
# create long version of dataframe
replicates_longer <- replicates %>%
pivot_longer(cols = c(aatt_asn, att_unus, gen_app_avo, mood, out_ctrl, task_invol))
View(replicates)
install.packages(c("backports", "bayestestR", "BDgraph", "bookdown", "brms", "callr", "car", "curl", "data.table", "devtools", "dials", "digest", "DT", "effects", "ellipsis", "emmeans", "fields", "ggeffects", "ggExtra", "ggplot2", "ggpubr", "ggsignif", "glasso", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huge", "infer", "insight", "jpeg", "knitr", "later", "lavaan", "lpSolve", "maptools", "markovchain", "matrixStats", "mediation", "modelr", "nFactors", "OpenMx", "openxlsx", "pbapply", "performance", "pkgbuild", "pkgconfig", "pls", "promises", "purrr", "RcppArmadillo", "RcppGSL", "RcppParallel", "recipes", "rlang", "rmarkdown", "RODBC", "rstanarm", "rstantools", "semPlot", "semTools", "shiny", "simstudy", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "slam", "spam", "StanHeaders", "sys", "tidylog", "tidymodels", "tidypredict", "tidyr", "tinytex", "whisker", "xfun", "xml2", "yardstick", "zip"))
install.packages(c("backports", "bayestestR", "BDgraph", "bookdown", "brms", "callr", "car", "curl", "data.table", "devtools", "dials", "digest", "DT", "effects", "ellipsis", "emmeans", "fields", "ggeffects", "ggExtra", "ggplot2", "ggpubr", "ggsignif", "glasso", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "huge", "infer", "insight", "jpeg", "knitr", "later", "lavaan", "lpSolve", "maptools", "markovchain", "matrixStats", "mediation", "modelr", "nFactors", "OpenMx", "openxlsx", "pbapply", "performance", "pkgbuild", "pkgconfig", "pls", "promises", "purrr", "RcppArmadillo", "RcppGSL", "RcppParallel", "recipes", "rlang", "rmarkdown", "RODBC", "rstanarm", "rstantools", "semPlot", "semTools", "shiny", "simstudy", "sjlabelled", "sjmisc", "sjPlot", "sjstats", "slam", "spam", "StanHeaders", "sys", "tidylog", "tidymodels", "tidypredict", "tidyr", "tinytex", "whisker", "xfun", "xml2", "yardstick", "zip"))
