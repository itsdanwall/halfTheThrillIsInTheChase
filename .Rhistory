cor(reps_cors[, -1])
# create dataframe which looks at each DV
sd_sd_sim <- replicates_longer %>%
group_by(name, reps) %>%
summarise(sd_sd_sim = sd(value),
pooled_sd_sim = mean(value)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim) %>%
rename(variable = name)
# join with observed sd of sds
sd_sd_sim <- sd_sd_sim %>%
left_join(tbl1_sum)
sd_sd_sim_wide <- sd_sd_sim %>%
dplyr::select(reps, variable, sd_sd_sim) %>%
pivot_wider(id_cols = reps,
values_from = sd_sd_sim,
names_from = variable)
# density plot
sd_sd_sim %>%
ggplot(aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable~.) +
theme_classic()
sim_meanpsi <- sd_sd_sim %>%
group_by(reps) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
sim_meanpsi$simpsi_gt_stupsi %>% sum
# Need to look at what happens
tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE)) %>% View
# create dataframe which looks at each DV
sd_sd_sim <- replicates_longer %>%
group_by(name, reps) %>%
summarise(sd_sd_sim = sd(value),
pooled_sd_sim = mean(value)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim) %>%
rename(variable = name)
# join with observed sd of sds
sd_sd_sim <- sd_sd_sim %>%
left_join(tbl1_sum)
sd_sd_sim_wide <- sd_sd_sim %>%
dplyr::select(reps, variable, sd_sd_sim) %>%
pivot_wider(id_cols = reps,
values_from = sd_sd_sim,
names_from = variable)
# density plot
sd_sd_sim %>%
ggplot(aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable~.) +
theme_classic()
sim_meanpsi <- sd_sd_sim %>%
group_by(reps) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
rep_d <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps_df <- as.data.frame(rep_d)
names(reps_df) <- "sd_rep"
reps_df
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
reps <- 10000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim)
# merge simulated data with empirical data
tbl1_reps_sum <- tbl1_reps_sum %>%
left_join(tbl1_sum)
# compare the number of observed sds that are larger than the simulated sds
tbl1_reps_sum <- tbl1_reps_sum %>%
mutate(obs_gt_sim = ifelse(sd_sd_obs >= sd_sd_sim, TRUE, FALSE))
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .) +
theme_classic()
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
# changed this
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi$simpsi_gt_stupsi %>% sum
dv_sim_meanpsi <- tbl1_reps_sum %>%
filter(variable %in% c("app_sen_ind", "prod_eval", "wtp")) %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
# load packages
library(mvtnorm)
library(tmvtnorm)
library(matrixcalc)
library(corpcor)
library(tidyverse)
# just look at the three main dependent variables
tb1_dvs <- tbl1 %>%
filter(variable %in% c("prod_eval", "wtp","app_sen_ind"))
# set up correlation and covariance matrix
correlation <- .9
sigma <- diag(1, 3, 3)
sigma[sigma == 0] <- correlation
# make the pooled sd's variances
diag(sigma) <- (c(1.71, 0.8026, 1.061))^2
# make sigma positive definite
# have to add tolerace
# from: https://stackoverflow.com/questions/27176595/error-sigma-must-be-positive-definite
sigma <- make.positive.definite(sigma, tol = 1e-3)
# check that the determinate isn't 0
det(sigma)
# Function which calculates SDs of DVs for correlated variables
# INPUT:
## means: observed means (need to be in the following order: app_sen_ind, prod_eval, wtp)
## sigma: covariance matrix (same for every condition based on pooled sd's and equivalent correlations across conditions)
# OUTPUT:
## standard deviations of the three DVs from a sample from a multivariate normal distribution
sd_cor_fn <- function(means, sigma) {
# Pull from a truncated multivariate normal distribution
dvs <- rtmvnorm(
n = 11,
mean = means,
sigma = sigma,
lower = c(1, 1, 0),
upper = c(7, 7, 10)
)
# Calc SDs and make pretty
sds <- apply(dvs, 2, sd)
names(sds) <- c("app_sen_ind", "prod_eval", "wtp")
sds
}
# subset dataframe with only three DVs
tbl1_dvs <- tbl1 %>%
filter(variable %in% c("app_sen_ind", "prod_eval", "wtp")) %>%
# arrange so consistent with function
arrange(variable)
# run multiple times
replicates <- tbl1_dvs %>%
group_by(manip) %>%
arrange(variable) %>%
#
group_modify(~ replicate(
reps,
(sd_cor_fn(
means = .x %>% pull(mean),
sigma)
)
)%>%
t() %>%
as_tibble()
)
# clean up dataframe
replicates <- replicates %>%
group_by(manip) %>%
mutate(reps = 1:n())
# create long version of dataframe
replicates_longer <- replicates %>%
pivot_longer(cols = c(app_sen_ind, prod_eval, wtp))
reps_cors <- replicates %>%
group_by(reps) %>%
summarise(sd_sd_app = sd(app_sen_ind),
sd_sd_prd = sd(prod_eval),
sd_sd_wtp = sd(wtp))
cor(reps_cors[, -1])
# create dataframe which looks at each DV
sd_sd_sim <- replicates_longer %>%
group_by(name, reps) %>%
summarise(sd_sd_sim = sd(value),
pooled_sd_sim = mean(value)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim) %>%
rename(variable = name)
# join with observed sd of sds
sd_sd_sim <- sd_sd_sim %>%
left_join(tbl1_sum)
sd_sd_sim_wide <- sd_sd_sim %>%
dplyr::select(reps, variable, sd_sd_sim) %>%
pivot_wider(id_cols = reps,
values_from = sd_sd_sim,
names_from = variable)
# density plot
sd_sd_sim %>%
ggplot(aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable~.) +
theme_classic()
sim_meanpsi <- sd_sd_sim %>%
group_by(reps) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
sim_meanpsi$simpsi_gt_stupsi %>% sum
4/10000
Sigma
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep, sd_cor_fn(rep(1,3), Sigma))
#Paeramters
mu <- rep(0, 3)  #mean 0 variables
# mu <- c(1.87, 0.85)
r = .9         #how correlated are the different DVs?
n = 11
simtot = 1000      #how many simulations
Sigma <- matrix(c(1,r,r,1),nrow=2,ncol=2)  #correlation matrix for population
Sigma <- diag(1, 3, 3)
Sigma[Sigma == 0] <- r
# make the pooled sd's variances
#Empty objects to save results
se=matrix(nrow=5,ncol=3)
sdse=matrix(nrow=simtot,ncol=3)
reps <- replicate(ncond*nrep, sd_cor_fn(rep(1,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
cor(reps_wide[, -1])
nrep <- 1000
reps <- replicate(ncond*nrep, sd_cor_fn(rep(6,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep, sd_cor_fn(rep(4,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
rep_d <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps_df <- as.data.frame(rep_d)
names(reps_df) <- "sd_rep"
reps_df
}
sd_cor_fn <- function(means, sigma) {
# Pull from a truncated multivariate normal distribution
dvs <- rtmvnorm(
n = 11,
mean = means,
sigma = sigma,
lower = c(1, 1, 0),
upper = c(7, 7, 10)
)
# Calc SDs and make pretty
sds <- apply(dvs, 2, sd)
names(sds) <- c("app_sen_ind", "prod_eval", "wtp")
sds
}
r = .9
Sigma <- diag(1, 3, 3)
Sigma[Sigma == 0] <- r
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep, sd_cor_fn(rep(4,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
r = .9
Sigma <- diag(1, 3, 3)
Sigma[Sigma == 0] <- r
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep,
sd_cor_fn(rep(2,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
r = .9
Sigma <- diag(1, 3, 3)
Sigma[Sigma == 0] <- r
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep,
sd_cor_fn(rep(1.5,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
r = .9
Sigma <- diag(1, 3, 3)
Sigma[Sigma == 0] <- r
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep,
sd_cor_fn(rep(6,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep, sd_cor_fn(rep(4,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep, sd_cor_fn(rep(1.1,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
r = .9
Sigma <- diag(1, 3, 3)
Sigma[Sigma == 0] <- r
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep,
sd_cor_fn(rep(1.2,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
r = .9
Sigma <- diag(1, 3, 3)
Sigma[Sigma == 0] <- r
ncond <- 5
nrep <- 1000
reps <- replicate(ncond*nrep,
sd_cor_fn(rep(4,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
reps <- replicate(ncond*nrep,
sd_cor_fn(rep(1.2,3), Sigma))
reps_wide <- t(reps) %>%
as_tibble() %>%
mutate(cond = rep(1:ncond, nrep),
rep = rep(1:nrep, each = ncond)) %>%
group_by(rep) %>%
summarise(sd_app_sen_ind = sd(app_sen_ind),
sd_prod_eval = sd(prod_eval),
sd_wtp = sd(wtp))
# truncation depresses correlation between SDs when means are close to boundaries
cor(reps_wide[, -1])
