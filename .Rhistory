ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
sim_meanpsi$simpsi_gt_stupsi %>% sum
1e5
nrep <- 1e4
library(mvtnorm)
library(tmvtnorm)
library(matrixcalc)
library(corpcor)
library(tidyverse)
# set up correlation and covariance matrix
correlation <- .9
sigma <- diag(1, 3, 3)
sigma[sigma == 0] <- correlation
diag(sigma) <- (c(1.71, 0.8026, 1.061))^2
nrep <- 1e4
# make sigma positive definite
# have to add tolerace
# from: https://stackoverflow.com/questions/27176595/error-sigma-must-be-positive-definite
sigma2 <- make.positive.definite(sigma, tol = 1e-3)
# check that the determinate isn't 0
det(sigma2)
sd_cor_fn <- function(means, sigma) {
dvs <- rtmvnorm(
11,
mean = means,
sigma = sigma,
lower = c(1, 1, 0),
upper = c(7, 7, 10)
)
sds <- apply(dvs, 2, sd)
names(sds) <- c("app_sen_ind", "prod_eval", "wtp")
sds
}
# get the standard deviations for each replication
ctrl3 <- replicate(nrep, sd_cor_fn(means =
c(2.33, 1.35, 0.96),
sigma2))
ctrl3_df <- t(ctrl3) %>% as.data.frame()  %>% mutate(cond = "ctrl_3",
nrep = 1:n())
ctrl2 <- replicate(nrep, sd_cor_fn(means =
c(1.87, 1.48, 0.85),
sigma2))
ctrl2_df <- t(ctrl2) %>% as.data.frame() %>% mutate(cond = "ctrl_2",
nrep = 1:n())
ctrl1 <- replicate(nrep, sd_cor_fn(means =
c(2.05, 1.31, 0.19),
sigma2))
ctrl1_df <- t(ctrl1) %>% as.data.frame() %>% mutate(cond = "ctrl_1",
nrep = 1:n())
avoid <- replicate(nrep, sd_cor_fn(means =
c(1.91, 1.41, 0.33),
sigma2))
avoid_df <- t(avoid) %>% as.data.frame() %>% mutate(cond = "avoid",
nrep = 1:n())
apprch <- replicate(nrep, sd_cor_fn(means =
c(3.70, 2.28, 1.49),
sigma2))
apprch_df <- t(apprch) %>% as.data.frame() %>% mutate(cond = "apprch",
nrep = 1:n())
ctrl3_df <- ctrl3_df %>%
pivot_longer(cols = -c(nrep, cond))
ctrl2_df <- ctrl2_df %>%
pivot_longer(cols = -c(nrep, cond))
ctrl1_df <- ctrl1_df %>%
pivot_longer(cols = -c(nrep, cond))
avoid_df <- avoid_df %>%
pivot_longer(cols = -c(nrep, cond))
apprch_df <- apprch_df %>%
pivot_longer(cols = -c(nrep, cond))
ctrls <- bind_rows(ctrl3_df,
ctrl2_df,
ctrl1_df,
avoid_df,
apprch_df) %>%
rename(variable = name)
sd_sd_sim <- ctrls %>%
group_by(variable, nrep) %>%
summarise(sd_sd_sim = sd(value),
pooled_sd_sim = mean(value)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim)
sd_sd_sim <- sd_sd_sim %>%
left_join(tbl1_sum)
sd_sd_sim %>%
ggplot(aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(.~variable)
sim_meanpsi <- sd_sd_sim %>%
group_by(nrep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = psi_obs[1]) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
sim_meanpsi$simpsi_gt_stupsi %>% sum
rm(list = ls())
library(MASS)
#Paeramters
mu <- rep(0, 2)  #mean 0 variables
r = -.7            #how correlated are the different DVs?
n = 11
simtot = 1000      #how many simulations
Sigma <- matrix(c(1,r,r,1),nrow=2,ncol=2)  #correlation matrix for population
se=matrix(nrow=5,ncol=2)
sdse=matrix(nrow=simtot,ncol=2)
simk=1
x1 <- mvrnorm(n=n, mu=mu, Sigma=Sigma)
x1
x2 <- mvrnorm(n=n, mu=mu, Sigma=Sigma)
x3 <- mvrnorm(n=n, mu=mu, Sigma=Sigma)
x4 <- mvrnorm(n=n, mu=mu, Sigma=Sigma)
x5 <- mvrnorm(n=n, mu=mu, Sigma=Sigma)
x2
se[1,]=apply(x1,2,sd)/sqrt(n)
apply(x1,2,sd)
sqrt(n)
apply(x1,2,sd)/sqrt(n)
sdse[simk,]=apply(se,2,sd)
library(mvtnorm)
library(tmvtnorm)
library(matrixcalc)
library(corpcor)
library(tidyverse)
# set up correlation and covariance matrix
correlation <- .9
sigma <- diag(1, 3, 3)
sigma[sigma == 0] <- correlation
diag(sigma) <- (c(1.71, 0.8026, 1.061))^2
nrep <- 1e5
# make sigma positive definite
# have to add tolerace
# from: https://stackoverflow.com/questions/27176595/error-sigma-must-be-positive-definite
sigma2 <- make.positive.definite(sigma, tol = 1e-3)
# check that the determinate isn't 0
det(sigma2)
sd_cor_fn <- function(means, sigma) {
dvs <- rtmvnorm(
11,
mean = means,
sigma = sigma,
lower = c(1, 1, 0),
upper = c(7, 7, 10)
)
sds <- apply(dvs, 2, sd)
names(sds) <- c("app_sen_ind", "prod_eval", "wtp")
sds
}
# get the standard deviations for each replication
ctrl3 <- replicate(nrep, sd_cor_fn(means =
c(2.33, 1.35, 0.96),
sigma2))
ctrl3_df <- t(ctrl3) %>% as.data.frame()  %>% mutate(cond = "ctrl_3",
nrep = 1:n())
ctrl2 <- replicate(nrep, sd_cor_fn(means =
c(1.87, 1.48, 0.85),
sigma2))
ctrl2_df <- t(ctrl2) %>% as.data.frame() %>% mutate(cond = "ctrl_2",
nrep = 1:n())
ctrl1 <- replicate(nrep, sd_cor_fn(means =
c(2.05, 1.31, 0.19),
sigma2))
ctrl1_df <- t(ctrl1) %>% as.data.frame() %>% mutate(cond = "ctrl_1",
nrep = 1:n())
avoid <- replicate(nrep, sd_cor_fn(means =
c(1.91, 1.41, 0.33),
sigma2))
avoid_df <- t(avoid) %>% as.data.frame() %>% mutate(cond = "avoid",
nrep = 1:n())
apprch <- replicate(nrep, sd_cor_fn(means =
c(3.70, 2.28, 1.49),
sigma2))
apprch_df <- t(apprch) %>% as.data.frame() %>% mutate(cond = "apprch",
nrep = 1:n())
ctrl3_df <- ctrl3_df %>%
pivot_longer(cols = -c(nrep, cond))
ctrl2_df <- ctrl2_df %>%
pivot_longer(cols = -c(nrep, cond))
ctrl1_df <- ctrl1_df %>%
pivot_longer(cols = -c(nrep, cond))
avoid_df <- avoid_df %>%
pivot_longer(cols = -c(nrep, cond))
apprch_df <- apprch_df %>%
pivot_longer(cols = -c(nrep, cond))
ctrls <- bind_rows(ctrl3_df,
ctrl2_df,
ctrl1_df,
avoid_df,
apprch_df) %>%
rename(variable = name)
sd_sd_sim <- ctrls %>%
group_by(variable, nrep) %>%
summarise(sd_sd_sim = sd(value),
pooled_sd_sim = mean(value)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim)
sd_sd_sim <- sd_sd_sim %>%
left_join(tbl1_sum)
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "sd_rep"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
sd_sd_sim <- sd_sd_sim %>%
left_join(tbl1_sum)
sd_sd_sim %>%
ggplot(aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(.~variable)
sim_meanpsi <- sd_sd_sim %>%
group_by(nrep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = psi_obs[1]) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi$simpsi_gt_stupsi %>% sum
sim_meanpsi$simpsi_gt_stupsi %>% length()
99947/reps
99947/nreps
99947/100000
# check that the determinate isn't 0
det(sigma)
# make sigma positive definite
# have to add tolerace
# from: https://stackoverflow.com/questions/27176595/error-sigma-must-be-positive-definite
sigma <- make.positive.definite(sigma, tol = 1e-3)
# check that the determinate isn't 0
det(sigma)
View(ctrl3_df)
sigma2
View(sim_meanpsi)
source('C:/Users/dwall/Downloads/2019 10 25 - correlation is SDSE if the variables are correlated (1).R', echo=TRUE)
source('C:/Users/dwall/Downloads/2019 10 25 - correlation is SDSE if the variables are correlated (1).R', echo=TRUE)
source('C:/Users/dwall/Downloads/2019 10 25 - correlation is SDSE if the variables are correlated (1).R', echo=TRUE)
reps <- 10000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "sd_rep"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
reps <- 10000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim)
# merge simulated data with empirical data
tbl1_reps_sum <- tbl1_reps_sum %>%
left_join(tbl1_sum)
# compare the number of observed sds that are larger than the simulated sds
tbl1_reps_sum <- tbl1_reps_sum %>%
mutate(obs_gt_sim = ifelse(sd_sd_obs >= sd_sd_sim, TRUE, FALSE))
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .) +
theme_classic()
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = psi_obs[1]) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi$simpsi_gt_stupsi %>% sum
source('C:/Users/dwall/Downloads/2019 10 25 - correlation is SDSE if the variables are correlated (1).R', echo=TRUE)
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = psi_obs[1]) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .) +
theme_classic()
library(dplyr)
library(truncnorm)
library(ggplot2)
# this dataframe is the long version of Table in the paper
tbl1 <- read.csv("table1.csv", stringsAsFactors = FALSE)
# This function takes in a data frame of characteristics and simulates nreps standard deviations
sd_samp <- function(df, reps) {
# Number of people in each cell
nper <- as.numeric(df[1, "n_per"])
# Minimum score on the scale
minscore <- as.numeric(df[1, "min_score"])
# Maximum score on the scale
maxscore <- as.numeric(df[1, "max_score"])
# mean observed
mean <- as.numeric(df[1, "mean"])
# pooled sd
pooledsd <- as.numeric(df[1, "pooled_sd_obs"])
# Simulate SDs
# NOTE: I'm using a truncated normal distribution because they use a 1-7 scale
reps <- replicate(reps,
sd(rtruncnorm(nper, a = minscore, b = maxscore, mean = mean,
sd = pooledsd)))
reps <- as.data.frame(reps)
names(reps) <- "sd_rep"
reps
}
# Add in the number of participants per cell and the standard deviation to table 1
tbl1 <- tbl1 %>%
mutate(n_per = 11,
sd = se * sqrt(n_per)) %>%
arrange(variable)
# create sd_sd and mean_sd for each variable in the study
tbl1_sum <- tbl1 %>%
group_by(variable) %>%
summarise(sd_sd_obs = sd(sd),
pooled_sd_obs = mean(sd),
mean_n_obs = mean(n_per),
se_sds_obs = pooled_sd_obs/(sqrt(2*mean_n_obs)),
psi_obs = sd_sd_obs / se_sds_obs)
# merge dataframes (need this for the simulation)
tbl1 <- merge(tbl1, tbl1_sum)
reps <- 10000
# simulate SDs
tbl1_reps <- tbl1 %>%
group_by(variable, manip) %>%
do(sd_samp(df = ., reps = reps))
# add in the replication number
tbl1_reps <- tbl1_reps %>%
group_by(variable, manip) %>%
mutate(n_rep = 1:reps)
# Summarized simulated data
tbl1_reps_sum <- tbl1_reps %>%
group_by(variable, n_rep) %>%
summarise(sd_sd_sim = sd(sd_rep),
pooled_sd_sim = mean(sd_rep)) %>%
# get the simulated standard deviations and psi's
mutate(se_sd_sim = pooled_sd_sim/(sqrt(2 * 11)),
psi_sim = sd_sd_sim/se_sd_sim)
# merge simulated data with empirical data
tbl1_reps_sum <- tbl1_reps_sum %>%
left_join(tbl1_sum)
# compare the number of observed sds that are larger than the simulated sds
tbl1_reps_sum <- tbl1_reps_sum %>%
mutate(obs_gt_sim = ifelse(sd_sd_obs >= sd_sd_sim, TRUE, FALSE))
# plot the histograms
ggplot(tbl1_reps_sum, aes(x = sd_sd_sim)) +
geom_density() +
geom_vline(aes(xintercept = sd_sd_obs)) +
facet_grid(variable ~ .) +
theme_classic()
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = psi_obs[1]) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi %>%
ggplot(aes(x = mean_psi_sim)) +
geom_density() +
geom_vline(aes(xintercept = psi_obs)) +
theme_classic()
View(tbl1_sum)
View(tbl1_reps_sum)
tbl1_sum$variable
dv_sim_meanpsi <- tbl1_reps_sum %>%
filter(variable %in% c("app_sen_ind", "prod_eval", "wtp")) %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = psi_obs[1]) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
dv_sim_meanpsi
View(tbl1_reps_sum)
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
sim_meanpsi$simpsi_gt_stupsi %>% sum
sim_meanpsi <- tbl1_reps_sum %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
dv_sim_meanpsi <- tbl1_reps_sum %>%
filter(variable %in% c("app_sen_ind", "prod_eval", "wtp")) %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
dv_sim_meanpsi <- tbl1_reps_sum %>%
filter(variable %in% c("app_sen_ind", "prod_eval", "wtp")) %>%
group_by(n_rep) %>%
# get mean psi for each replication
summarise(mean_psi_sim = mean(psi_sim),
psi_obs = mean(psi_obs)) %>%
# get the number of simulated SD's which are larger than the observed
mutate(simpsi_gt_stupsi = ifelse(mean_psi_sim > psi_obs, TRUE, FALSE))
dv_sim_meanpsi
dv_sim_meanpsi$simpsi_gt_stupsi %>% sum
